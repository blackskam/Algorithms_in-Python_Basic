# 2. Написать два алгоритма нахождения i-го по счёту простого числа.
# Функция нахождения простого числа должна принимать на вход натуральное
# и возвращать соответствующее простое число. Проанализировать скорость и сложность алгоритмов.
#
# Первый — с помощью алгоритма «Решето Эратосфена».
# Примечание. Алгоритм «Решето Эратосфена» разбирался на одном из прошлых уроков.
# Используйте этот код и попробуйте его улучшить/оптимизировать под задачу.
#
# Второй — без использования «Решета Эратосфена».
# Примечание. Вспомните классический способ проверки числа на простоту.

import timeit
import cProfile

def fun_1(n):
    a = [0] * n  # создание массива с n количеством элементов
    for i in range(n):  # заполнение массива ...
        a[i] = i  # значениями от 0 до n-1

# вторым элементом является единица, которую не считают простым числом
# забиваем ее нулем.
    a[1] = 0

    m = 2  # замена на 0 начинается с 3-го элемента (первые два уже нули)
    while m < n:  # перебор всех элементов до заданного числа
        if a[m] != 0:  # если он не равен нулю, то
            j = m * 2  # увеличить в два раза (текущий элемент - простое число)
            while j < n:
                a[j] = 0  # заменить на 0
                j = j + m  # перейти в позицию на m больше
        m += 1
    b = []
    for i in a:
        if a[i] != 0:
            b.append(a[i])
    return b
print(fun_1(100))

# print(timeit.timeit('fun_1(500)', number=100, globals=globals()))    # 0.057200706000000004
# print(timeit.timeit('fun_1(1000)', number=100, globals=globals()))   # 0.113484391
# print(timeit.timeit('fun_1(2000)', number=100, globals=globals()))   # 0.219523268
# print(timeit.timeit('fun_1(4000)', number=100, globals=globals()))   # 0.429706186
# print(timeit.timeit('fun_1(8000)', number=100, globals=globals()))   # 0.930687355
#
# cProfile.run('fun_1(500)') # 2653 function calls in 0.001 seconds
# cProfile.run('fun_1(1000)') # 5324 function calls in 0.002 seconds
# cProfile.run('fun_1(2000)') # 10574 function calls in 0.004 seconds
# cProfile.run('fun_1(4000)') # 21176 function calls in 0.009 seconds
# cProfile.run('fun_1(8000)') # 42388 function calls in 0.017 seconds
